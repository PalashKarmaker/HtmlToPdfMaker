<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HtmlToPdfMaker</name>
    </assembly>
    <members>
        <member name="T:HtmlToPdfMaker.Convert">
             <summary>Class to convert html to Pdf</summary>
             <example>
             Usage:
             <code>
             [TestMethod()]
             public void ToPdfTest()
             {
                 List&lt;ContentSet&gt; contentSets = [];
                 contentSets.Add(SetContents("&lt;body&gt;&lt;h3&gt;Спокойной ночи&lt;/h3&gt;&lt;p&gt;शुभ रात्रि&lt;/p&gt;&lt;p&gt;Português para principiantes&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;আমি &lt;/p&gt;&lt;/body&gt;", "&lt;body&gt;&lt;div&gt;&lt;b&gt;Спокойной ночи&lt;/b&gt;&lt;/div&gt;&lt;/body&gt;", "Test Page"));
                 contentSets.Add(SetContents("&lt;body&gt;&lt;div&gt;&lt;h1&gt;Palash J Karmaker&lt;/h1&gt;&lt;/div&gt;&lt;/body&gt;", "&lt;body&gt;&lt;h3&gt;&lt;u&gt;Header1&lt;/u&gt;&lt;/h3&gt;", "My page"));
                 using Convert cvt = new(contentSets);
                 var data = cvt.ToPdfAsync(CancellationToken.None).Result;
                 File.WriteAllBytes(AppDomain.CurrentDomain.BaseDirectory + "\\Pdf\\test2.pdf", data);
                 Assert.IsTrue(data.Length &gt; 0);
            
                 static ContentSet SetContents(string bodyHtml, string headerHtml, string footerHtml)
                 {
                     var header = Content.CreateDefaultStyledHeader(headerHtml);
                     var footer = Content.CreateDefaultStyledFooter(footerHtml);
                     var body = Content.CreateDefaultStyledBody(bodyHtml);
                     return new(body, header, footer);
                 }
             }</code>
             </example>
             <seealso cref="T:Utility.Disposable" />
        </member>
        <member name="M:HtmlToPdfMaker.Convert.#ctor(System.Collections.Generic.IReadOnlyList{HtmlToPdfMaker.ContentSet},System.String,DinkToPdf.Orientation,DinkToPdf.PaperKind)">
             <summary>Class to convert html to Pdf</summary>
             <example>
             Usage:
             <code>
             [TestMethod()]
             public void ToPdfTest()
             {
                 List&lt;ContentSet&gt; contentSets = [];
                 contentSets.Add(SetContents("&lt;body&gt;&lt;h3&gt;Спокойной ночи&lt;/h3&gt;&lt;p&gt;शुभ रात्रि&lt;/p&gt;&lt;p&gt;Português para principiantes&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;আমি &lt;/p&gt;&lt;/body&gt;", "&lt;body&gt;&lt;div&gt;&lt;b&gt;Спокойной ночи&lt;/b&gt;&lt;/div&gt;&lt;/body&gt;", "Test Page"));
                 contentSets.Add(SetContents("&lt;body&gt;&lt;div&gt;&lt;h1&gt;Palash J Karmaker&lt;/h1&gt;&lt;/div&gt;&lt;/body&gt;", "&lt;body&gt;&lt;h3&gt;&lt;u&gt;Header1&lt;/u&gt;&lt;/h3&gt;", "My page"));
                 using Convert cvt = new(contentSets);
                 var data = cvt.ToPdfAsync(CancellationToken.None).Result;
                 File.WriteAllBytes(AppDomain.CurrentDomain.BaseDirectory + "\\Pdf\\test2.pdf", data);
                 Assert.IsTrue(data.Length &gt; 0);
            
                 static ContentSet SetContents(string bodyHtml, string headerHtml, string footerHtml)
                 {
                     var header = Content.CreateDefaultStyledHeader(headerHtml);
                     var footer = Content.CreateDefaultStyledFooter(footerHtml);
                     var body = Content.CreateDefaultStyledBody(bodyHtml);
                     return new(body, header, footer);
                 }
             }</code>
             </example>
             <seealso cref="T:Utility.Disposable" />
        </member>
        <member name="F:HtmlToPdfMaker.Convert.tempFolder">
            <summary>
            The tempFolder
            </summary>
        </member>
        <member name="M:HtmlToPdfMaker.Convert.ReleaseResources">
            <summary>
            Releases the resources.
            </summary>
        </member>
        <member name="M:HtmlToPdfMaker.Convert.ToPdfAsync(System.Threading.CancellationToken)">
            <summary>
            Converts to pdf.
            </summary>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:HtmlToPdfMaker.Convert.GeneratePdf(System.Collections.Generic.List{DinkToPdf.ObjectSettings})">
            <summary>
            Generates the PDF.
            </summary>
            <param name="objSettings">The object settings.</param>
            <returns></returns>
        </member>
        <member name="M:HtmlToPdfMaker.Convert.PngPattern">
            <remarks>
            Pattern:<br/>
            <code>[\\w\\.\\/\\:\\-]+\\.png</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [--/:\w] greedily at least once.<br/>
            ○ Match '.'.<br/>
            ○ Match a character in the set [Pp].<br/>
            ○ Match a character in the set [Nn].<br/>
            ○ Match a character in the set [Gg].<br/>
            </code>
            </remarks>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PngPattern_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PngPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PngPattern_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PngPattern_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PngPattern_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PngPattern_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PngPattern_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PngPattern_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PngPattern_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PngPattern_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfNonAsciiOrAny_8894CC54583B80A14EAD0C952FCDE8DDC1F405D966650724E260E131D3AFE36B(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a character in the set [--/:\w].</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_FFFFFFFFFF1F00F801000078010000F8">
            <summary>Supports searching for characters in or not in "\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\t\n\v\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&amp;'()*+,;&lt;=&gt;?@[\\]^`{|}~\u007f".</summary>
        </member>
    </members>
</doc>
